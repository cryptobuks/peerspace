/*
 * Copyright 2016 github.com/straightway
 *
 *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package straightway.peerspace.net

import org.junit.jupiter.api.Test
import straightway.peerspace.data.Id
import straightway.testing.bdd.Given
import straightway.testing.flow.Empty
import straightway.testing.flow.Equal
import straightway.testing.flow.expect
import straightway.testing.flow.is_
import straightway.testing.flow.to_
import straightway.testing.testAutoGeneratedDataClassMethods

class ForwardStateTest {

    private companion object {
        val idPending = Id("idPending")
        val idSuccess = Id("idSuccess")
        val idFailed = Id("idFailed")
        val idNew = Id("idNew")
    }

    @Test
    fun `auto-generated data class methods`() =
            ForwardState().testAutoGeneratedDataClassMethods()

    @Test
    fun `successful is initially empty`() =
            expect(ForwardState().successful is_ Empty)

    @Test
    fun `failed is initially empty`() =
            expect(ForwardState().failed is_ Empty)

    @Test
    fun `pending is initially empty`() =
            expect(ForwardState().pending is_ Empty)

    private val test = Given {
        ForwardState(
                pending = setOf(idPending),
                successful = setOf(idSuccess),
                failed = setOf(idFailed))
    }

    @Test
    fun `setPending adds new id to pending and keeps others`() =
            test when_ {
                setPending(idNew)
            } then {
                expect(it.result is_ Equal to_ copy(pending = setOf(idPending, idNew)))
            }

    @Test
    fun `setPending removes id from successful`() =
            test when_ {
                setPending(idSuccess)
            } then {
                expect(it.result is_ Equal to_ copy(
                        successful = setOf(),
                        pending = setOf(idPending, idSuccess)))
            }

    @Test
    fun `setPending removes id from failure`() =
            test when_ {
                setPending(idFailed)
            } then {
                expect(it.result is_ Equal to_ copy(
                        failed = setOf(),
                        pending = setOf(idPending, idFailed)))
            }

    @Test
    fun `setPending ignores doubles`() =
            test when_ {
                setPending(idPending)
            } then {
                expect(it.result is_ Equal to_ this)
            }

    @Test
    fun `setSuccess adds new id to success and keeps others`() =
            test when_ {
                setSuccess(idNew)
            } then {
                expect(it.result is_ Equal to_ copy(successful = setOf(idSuccess, idNew)))
            }

    @Test
    fun `setSuccess removes id from pending`() =
            test when_ {
                setSuccess(idPending)
            } then {
                expect(it.result is_ Equal to_ copy(
                        pending = setOf(),
                        successful = setOf(idSuccess, idPending)))
            }

    @Test
    fun `setSuccess removes id from failure`() =
            test when_ {
                setSuccess(idFailed)
            } then {
                expect(it.result is_ Equal to_ copy(
                        failed = setOf(),
                        successful = setOf(idSuccess, idFailed)))
            }

    @Test
    fun `setSuccess ignores doubles`() =
            test when_ {
                setSuccess(idSuccess)
            } then {
                expect(it.result is_ Equal to_ this)
            }

    @Test
    fun `setFailed adds new id to failed and keeps others`() =
            test when_ {
                setFailed(idNew)
            } then {
                expect(it.result is_ Equal to_ copy(failed = setOf(idFailed, idNew)))
            }

    @Test
    fun `setFailed removes id from successful`() =
            test when_ {
                setFailed(idSuccess)
            } then {
                expect(it.result is_ Equal to_ copy(
                        successful = setOf(),
                        failed = setOf(idFailed, idSuccess)))
            }

    @Test
    fun `setFailed removes id from pending`() =
            test when_ {
                setFailed(idPending)
            } then {
                expect(it.result is_ Equal to_ copy(
                        pending = setOf(),
                        failed = setOf(idFailed, idPending)))
            }

    @Test
    fun `setFailed ignores doubles`() =
            test when_ {
                setFailed(idFailed)
            } then {
                expect(it.result is_ Equal to_ this)
            }
}